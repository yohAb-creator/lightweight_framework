import os
import argparse
from PIL import Image
import google.generativeai as genai


# This script requires the following libraries:
# pip install google-generativeai Pillow

def generate_initial_prompt(image_path: str, goal: str, api_key: str) -> str:
    """
    Uses Gemini 1.5 Pro to analyze an Android screenshot and generate a structured
    prompt for an agent.

    Args:
        image_path: The filesystem path to the screenshot image.
        goal: The high-level task goal (e.g., "Uninstall Slack").
        api_key: The GCP API Key.

    Returns:
        A structured text prompt generated by the multimodal LLM.
    """
    if not api_key:
        raise ValueError("GCP_API_KEY must be provided.")

    genai.configure(api_key=api_key)

    try:
        print(f"Loading image from: {image_path}")
        img = Image.open(image_path)
    except FileNotFoundError:
        return f"Error: Image file not found at {image_path}"
    except Exception as e:
        return f"Error loading image: {e}"

    # Use the latest multimodal model
    model = genai.GenerativeModel('gemini-2.5-pro')

    # This is the prompt that instructs the multimodal model on how to behave.
    # It asks the model to analyze the image in the context of the goal and
    # produce a structured output.
    system_prompt = f"""
    You are an expert Android UI analyst. Your task is to examine a screenshot of an Android device and a high-level goal. Based on this visual information, you must generate a structured prompt that an LLM-based agent can use to decide its next action.

    The user's goal is: "{goal}"

    Analyze the provided screenshot and respond with the following structured format:
    - Goal: [Restate the user's goal]
    - Current Screen: [Provide a brief, one-sentence description of the current screen, e.g., "Settings > Apps"]
    - UI Elements: [Provide a bulleted list of the most important clickable UI elements visible on the screen]
    - Suggested Action: [Suggest the single best next action in the format VERB("element_text")]
    """

    print("Querying Gemini 1.5 Pro...")
    try:
        response = model.generate_content([system_prompt, img])
        return response.text.strip()
    except Exception as e:
        return f"Error calling the Gemini API: {e}"


if __name__ == "__main__":
    # --- Setup Command-Line Argument Parsing ---
    parser = argparse.ArgumentParser(description="Generate an initial agent prompt from a screenshot.")
    parser.add_argument("--image", required=True, help="Path to the screenshot image file.")
    parser.add_argument("--goal", required=True, help="The high-level task goal.")

    # It's better practice to get the API key from an environment variable
    # for security reasons, but a flag is provided for ease of use.
    parser.add_argument(
        "--api_key",
        default=os.environ.get("GCP_API_KEY"),
        help="Your GCP API Key. Defaults to the GCP_API_KEY environment variable."
    )

    args = parser.parse_args()

    # --- Execute the Main Function ---
    generated_prompt = generate_initial_prompt(args.image, args.goal, args.api_key)

    # --- Print the Result ---
    print("\n" + "=" * 25 + " Generated Prompt " + "=" * 25)
    print(generated_prompt)
    print("=" * 70)
